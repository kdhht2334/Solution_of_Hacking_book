# 0x320 Buffer Overflows

# Buffer overflow vulnerabilities have been around since the early days of
# computers and still exist today.

# If a programmer wants to put 10 bytes of data into a buffer that had only
# been allocated 8 bytes of space, that type of action is allowed,
# even though it will most likely cause the program to crash.

# This is known as a `buffer overrun' or 'buffer overflow'.
# Here is an example (page 119).

gcc -o overflow_example overflow_example.c
./overflow_example 'AAAAAAA'
#[BEFORE] buffer_two is at 0x7ffeed5b65a8 and contains 'two'
#[BEFORE] buffer_one is at 0x7ffeed5b65b0 and contains 'one'
#[BEFORE] value is at 0x7ffeed5b6594 and is (0x00000005)
#
#[STRCPY] copying 7 bytes into buffer_two
#
#[AFTER] buffer_two is at 0x7ffeed5b65a8 and contains 'AAAAAAA'
#[AFTER] buffer_one is at 0x7ffeed5b65b0 and contains 'one'
#[AFTER] value is at 0x7ffeed5b6594 and is (0x00000005)

./overflow_example 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'
#[BEFORE] buffer_two is at 0x7ffee0440598 and contains 'two'
#[BEFORE] buffer_one is at 0x7ffee04405a0 and contains 'one'
#[BEFORE] value is at 0x7ffee0440584 and is (0x00000005)
#
#[STRCPY] copying 11 bytes into buffer_two
#
#Abort trap: 6  # Overflow happened!


